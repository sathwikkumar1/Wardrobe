{"ast":null,"code":"import { ActionTypes } from \"../constants/action-types\";\nconst initialState = {\n  products: [],\n  filteredProducts: []\n};\nexport const productReducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case ActionTypes.SET_PRODUCTS:\n      return {\n        ...state,\n        products: payload\n      };\n    case ActionTypes.FETCH_PRODUCTS:\n      return {\n        ...state,\n        products: payload,\n        filteredProducts: payload\n      };\n    case ActionTypes.FILTER_CATEGORY:\n      let filteredProducts;\n      if (payload != null) {\n        filteredProducts = state.products.filter(product => payload.includes(product.category));\n      } else {\n        filteredProducts = state.products;\n      }\n      return {\n        ...state,\n        filteredProducts: filteredProducts,\n        selectedCategories: payload\n      };\n    case ActionTypes.SEARCH_TERM:\n      let searchedProducts;\n      if (payload != null) {\n        searchedProducts = state.products.filter(product => product.title.toLowerCase().includes(payload.toLowerCase()));\n      } else {\n        searchedProducts = state.products;\n      }\n      return {\n        ...state,\n        filteredProducts: searchedProducts,\n        searchTerm: payload\n      };\n    case ActionTypes.SORT_BY:\n      let sortedProducts;\n      if (payload === 'hightoLow') sortedProducts = state.filteredProducts.sort((a, b) => b.price - a.price);else if (payload === 'lowtoHigh') sortedProducts = [...filteredProducts].sort((a, b) => a.price - b.price);else if (payload === 'alphabetical') sortedProducts = [...filteredProducts].sort((a, b) => a.title.localeCompare(b.title, undefined, {\n        sensitivity: 'base'\n      }));else return state; // Default case, return the current state if the action type is not recognized\n\n      return {\n        ...state,\n        filteredProducts: sortedProducts,\n        sortBy: payload\n      };\n    default:\n      return state;\n  }\n};\nexport const selectedProductReducer = (state = {}, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case ActionTypes.SELECTED_PRODUCTS:\n      return {\n        ...state,\n        ...payload\n      };\n    case ActionTypes.REMOVE_SELECTED_PRODUCTS:\n      return {};\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ActionTypes","initialState","products","filteredProducts","productReducer","state","type","payload","SET_PRODUCTS","FETCH_PRODUCTS","FILTER_CATEGORY","filter","product","includes","category","selectedCategories","SEARCH_TERM","searchedProducts","title","toLowerCase","searchTerm","SORT_BY","sortedProducts","sort","a","b","price","localeCompare","undefined","sensitivity","sortBy","selectedProductReducer","SELECTED_PRODUCTS","REMOVE_SELECTED_PRODUCTS"],"sources":["D:/React-redux/fakeshop/src/redux/reducers/productReducer.js"],"sourcesContent":["import { ActionTypes } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    products:[] ,\r\n    filteredProducts:[]\r\n}\r\n\r\nexport const productReducer = (state = initialState,{type,payload}) => {\r\n    switch (type)  {\r\n        case ActionTypes.SET_PRODUCTS:\r\n            return {...state, products:payload};\r\n\r\n\r\n        case ActionTypes.FETCH_PRODUCTS:\r\n                return {...state, products : payload , filteredProducts : payload};\r\n\r\n\r\n        case ActionTypes.FILTER_CATEGORY:\r\n            let filteredProducts\r\n            if(payload!=null) {\r\n             filteredProducts= state.products.filter(product=> payload.includes(product.category));\r\n            } else {\r\n                filteredProducts = state.products\r\n            }\r\n                    return {\r\n                        ...state,\r\n                        filteredProducts:filteredProducts ,\r\n                        selectedCategories : payload\r\n                      }; \r\n\r\n\r\n        case ActionTypes.SEARCH_TERM:\r\n            let searchedProducts\r\n            if(payload!=null){\r\n                searchedProducts = state.products.filter(product => product.title.toLowerCase().includes(payload.toLowerCase()))\r\n            }else {\r\n                searchedProducts = state.products;\r\n            }\r\n            return {\r\n                ...state,\r\n                filteredProducts:searchedProducts,\r\n                searchTerm:payload\r\n            }\r\n\r\n\r\n            case ActionTypes.SORT_BY:\r\n                let sortedProducts;\r\n                if (payload === 'hightoLow') \r\n                  sortedProducts = state.filteredProducts.sort((a, b) => b.price - a.price);\r\n                else if (payload === 'lowtoHigh')\r\n                  sortedProducts = [...filteredProducts].sort((a, b) => a.price - b.price);\r\n                else if (payload === 'alphabetical')\r\n                  sortedProducts = [...filteredProducts].sort((a, b) => a.title.localeCompare(b.title, undefined, { sensitivity: 'base' }));\r\n                else\r\n                  return state; // Default case, return the current state if the action type is not recognized\r\n              \r\n                return {\r\n                  ...state,\r\n                  filteredProducts: sortedProducts,\r\n                  sortBy: payload,\r\n                };\r\n              \r\n\r\n        default:\r\n            return state;\r\n}\r\n}\r\n\r\nexport const selectedProductReducer = (state = {},{type,payload}) => {\r\n    switch (type) {\r\n         case ActionTypes.SELECTED_PRODUCTS:\r\n            return {...state, ...payload}; \r\n         case ActionTypes.REMOVE_SELECTED_PRODUCTS:\r\n            return {}; \r\n        default:\r\n            return state;\r\n}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}